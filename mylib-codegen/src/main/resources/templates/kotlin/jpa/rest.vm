package ${config.pkg}.rest

import ${config.pkg}.manager.${entity.name}Manager
import ${entityPackage}.${entity.name}
import org.springframework.web.bind.annotation.*
import com.fasterxml.jackson.annotation.JsonView
import com.zy.mylib.base.model.BaseModel
import com.zy.mylib.data.jpa.PageUtils
import com.zy.mylib.security.LoginUser
import com.zy.mylib.webmvc.base.BaseRest
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import javax.inject.Inject
import com.zy.mylib.base.exception.BusException
import org.springframework.validation.annotation.Validated

/**
 * ${entity.caption} rest接口
 * @author 代码生成器
 */
//@RestController
//@RequestMapping("/填写rest地址")
class ${entity.name}Rest: BaseRest() {
  @Inject
  private val manager: ${entity.name}Manager? = null

  @GetMapping("{id}")
  @JsonView(BaseModel.DetailView::class)
  fun findOne(@PathVariable("id") id: String): ${entity.name} {
    var ret = manager!!.findById(id)
    if(ret.isPresent) {
      return ret.get()
    }
    throw BusException.builder().message("数据不存在").httpStatus(404).build()
  }

  @PostMapping
  @JsonView(BaseModel.DetailView::class)
  fun addEntity(@Validated(BaseModel.AddCheck::class) @RequestBody entity: ${entity.name}): ${entity.name} {
    return manager!!.add(entity)
  }

  @PutMapping
  @JsonView(BaseModel.DetailView::class)
  fun updateEntity(@Validated(BaseModel.UpdateCheck::class) @RequestBody entity: ${entity.name}): ${entity.name} {
    return manager!!.update(entity)
  }

  @DeleteMapping("{id}")
  fun remove(@PathVariable("id") id: String) {
    return manager!!.remove(id)
  }

  @GetMapping("/pager")
  fun findPage(pageable: Pageable, filter: ${entity.name}): Page<${entity.name}>? {
    var operateMap = HashMap<String, PageUtils.Operate>()
    var extParams = HashMap<String, Any>()

    return manager!!.pager(pageable, filter, operateMap, extParams)
  }
}
