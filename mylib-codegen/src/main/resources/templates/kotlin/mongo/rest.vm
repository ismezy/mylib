package ${package}.rest

import ${package}.manager.${entity.name}Manager
import org.springframework.web.bind.annotation.*
import com.zy.mylib.webmvc.base.BaseRest
import javax.inject.Inject
import com.zy.mylib.base.model.*
import com.zy.mylib.base.exception.BusException
import org.springframework.validation.annotation.Validated
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import ${package}.dto.Add${entity.name}Request
import ${package}.dto.Add${entity.name}Response
import ${package}.dto.Update${entity.name}Request
import ${package}.dto.Update${entity.name}Response
import ${package}.dto.Get${entity.name}Response
import ${package}.dto.Query${entity.name}Response
import ${package}.dto.mapper.${entity.name}Convert

/**
 * ${entity.caption} rest接口
 * @author 代码生成器
 */
//@RestController
//@RequestMapping("/填写rest地址")
@Api(description = "${entity.caption}接口")
class ${entity.name}Rest: BaseRest() {
  @Inject
  private lateinit var manager: ${entity.name}Manager
  @Inject
  private lateinit var convert: ${entity.name}Convert

  /**
   * 获取${entity.caption}详情
   */
  @GetMapping("{id}")
  @ApiOperation("获取${entity.caption}详情")
  fun findOne(@PathVariable("id") id: String): Get${entity.name}Response {
    var ret = manager.findById(id)
    if(ret != null) {
      return convert.toGet${entity.name}Response(ret)
    }
    throw BusException.builder().message("数据不存在").httpStatus(404).build()
  }

  /**
   * 创建${entity.caption}
   */
  @ApiOperation("创建${entity.caption}")
  @PostMapping
  fun addEntity(@Validated @RequestBody req: Add${entity.name}Request): Add${entity.name}Response {
    val entity = convert.fromAdd${entity.name}Request(req)
    return convert.toAdd${entity.name}Response(manager.add(entity))
  }
  /**
   * 更新${entity.caption}
   */
  @ApiOperation("更新${entity.caption}")
  @PutMapping
  fun updateEntity(@Validated @RequestBody req: Update${entity.name}Request): Update${entity.name}Response {
    val entity = convert.fromUpdate${entity.name}Request(req)
    return convert.toUpdate${entity.name}Response(manager.update(entity))
  }

  /**
   * 删除${entity.caption}
   */
  @ApiOperation("删除${entity.caption}")
  @DeleteMapping("{id}")
  fun remove(@PathVariable("id") id: String) {
    return manager.delete(id)
  }

  /**
   * 分页查询${entity.caption}
   */
  @ApiOperation("分页查询${entity.caption}")
  @GetMapping("/pager")
  fun findPage(pageRequest: PageRequest, conditions: List<Condition>): PageResponse<Query${entity.name}Response> {
    return manager.pageQuery(pageRequest, conditions).let {
      PageResponse.fromRequest<Query${entity.name}Response>(pageRequest, it.totalElement,
      it.list?.map { it1 -> convert.toQuery${entity.name}Response(it1) })
    }
  }
}
